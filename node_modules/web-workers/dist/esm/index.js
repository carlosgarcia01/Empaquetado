const inbuiltMethods=["append","message","postMessage","call","onerror","kill","getMessage","ondata"];function WebWorker(a,b){if(this._options=b||{},!a)throw new Error("The script is required in `WebWorker()`");this._exports=[],this._message=this._options.message||null,this._script=a,this._code=insideFunction(this._script.toString()),this._listen=insideFunction(internalSetup.toString());const c={};let d=null;this._code.replace(/^(\s*)\s+((?:async\s*)?function(?:\s*\*)?|const|let|var)(\s+)([a-zA-Z$_][a-zA-Z0-9$_]*)/mg,a=>{const b=a.trim().split(" ");if(d=b[b.length-1],inbuiltMethods.includes(d))throw new Error(`${d} is an in-built function/api, please rename it to something else`);this._exports.push(d),c[d]=d}),this._code=`(function () {\nvar namespace = ${JSON.stringify(c)};\n${this._code}\n${this._listen}})()`;const e=new Blob([this._code]);this._url=URL.createObjectURL(e),this._worker=new Worker(this._url),methodsSetup(this._worker,this._exports)}function insideFunction(a){return a.slice(a.indexOf("{")+1,a.lastIndexOf("}"))}function internalSetup(){this.onmessage=({data})=>{"CALL"===data.type?Promise.resolve().then(()=>eval(data.method).apply(null,data.args)).then(a=>{a&&this.postMessage({type:"CALL_RETURN",result:a})}):eval("ondata").call(this,data)}}function methodCall(a,b,c,d){a.postMessage({type:"CALL",method:b,args:c}),a.addEventListener("message",({data:a})=>{"CALL_RETURN"===a.type&&Promise.resolve().then(()=>a.result).then(a=>d(a))})}function methodsSetup(a,b){for(let c=0;c<b.length;c++)WebWorker.prototype[b[c]]=(...d)=>new Promise(e=>{methodCall(a,b[c],d,e)})}WebWorker.prototype.append=function(a){if(typeof a!=typeof this._message)throw new Error(`Can't append ${typeof a} message with ${typeof this._message} message already created. Use \`worker.clearMessage()\` `);Array.isArray(a)?this._message=this._message.concat(a):"object"==typeof a?this._message=Object.assign({},this._message,a):this._message+=a},WebWorker.prototype.message=function(a){this._message=a},WebWorker.prototype.postMessage=function(a){this._worker.postMessage(a||this._message)},WebWorker.prototype.call=function(a,...b){this._worker.postMessage({type:"CALL",method:a,args:b})},WebWorker.prototype.getMessage=function(){return this._message},WebWorker.prototype.kill=function(){this._worker.terminate()},WebWorker.prototype.onerror=function(a){this._worker.addEventListener("error",a)};var index=(a,b)=>new WebWorker(a,b);export default index;
